git的两大特点：（1）版本控制：可以解决多人同时开发的代码问题，也可以解决找会历史代码的问题
               （2）分布式：Git是分布式版本控制系统。


安装与配置：
sudo apt-get install git ---安装git
创建一个版本库：git init
创建一个版本：git add code.txt
               git commit -m '备注信息'


查看版本库当前的情况: git status
查看版本记录：git log
回到某一个版本：(1)git reset --hard HEAD^-----回到当前版本的前一个版本
                (2)也可以使用命令:git reset --hard HEAD~100 表示当前版本的前100版本
                (3)从版本1回到版本2------》git reset --hard 版本号
查看之前的操作记录：git reflog

把文件往Git版本库里添加的时候，分两步：
1.使用git add把文件添加进去，实际上就是把文件修改添加到暂存区
2.用git commit 提交更改，实际上就是把暂存区的所有内容提交到当前分支

             code.txt(工作区)---git add--->暂存区---git commit--->(master)分支

+++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++

管理修改：

git管理的文件的修改，它只会提交暂存区的修改来创建版本


撤销修改：

撤销工作区的修改：git checkout -- <文件>
撤销暂存区的修改: git reset HEAD 文件

总结：1.当你该乱了工作区某个文件的内容，想直接丢弃工作的修改，使用命令：git checkout -- file
      2.当你不但该乱了工作区的文件内容：还添加到了暂存区，想丢弃修改，分为两步，一是使用命令
        git reset HEAD <文件>,之后使用git checkout -- file就可以撤销修改了
      3.如果已经提交了不合适的修改到版本库，就只有版本回退了。


************************************************************************
************************************************************************
************************************************************************
对比文件的不同
1.对比工作区和某个版本中文件的不同
   git diff HEAD -- code.txt

2.对比两个版本间文件的不同
    git diff HEAD HEAD^ -- code.txt

删除文件：
1. rm <file>  ====>删除了工作区的文件
2. 执行上面的操作之后，你有两个选择，一是确实要从版本库中删除该文件，
   使用命令git rm删除，并且git commit,二是删错了，直接使用git checkout -- <文件>，这样文件又回来了


×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××

分支管理

意义：创建自己的分支之后，在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的
        分支上，这样既安全，又不影响别人的工作。

主分支：git把我们之前每次提交的版本串成一条时间，这条时间线就是一个分支，即Master分支，严格来说，
        HEAD不是指向提交，而是指向master，master才是指向当前提交，HEAD指向的是当前分支。

创建新的分支：当我们创建新的分支，例如：dev,git新建一个指针dev，指向master相同的提交，再把HEAD指向dev，
            就表示当前分支再dev上。

命令:
1.git branch 查看当前再那个分支下工作
2. 创建一个分支dev,并切换到其上进行工作  ---》git checkout -b dev

3.把dev分支的工作合并到master分支上---》git merge dev(当前要切换到master分支上)  注意：git merge命令用于合并指定分支到当前分支。

4.Fast-forward信息，是指合并使用的快速合并，快速合并就是直接把master指向dev的当前提交，因此合并速度非常卡快。

5.删除dev分支：git branch -d dev

6.切换到已有的分支：git branch <name>


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


解决冲突

1. 如果现在有两个分支，master和dev并且分支各自有新的提交，这种情况下，git无法执行‘快速合并’,只能试图把各自的修改的合并起来，但是这种合并可能会有冲突。

2 . 对于上面的情况,必须手动解决冲突，文件中git会标记出不同的分支内容，我们修改之后，再提交，就可以解决冲突问题。

3.使用带有参数的git log可以查看分支合并的情况。git log --graph --pretty=oneline


4.通常合并分支时，如果可能，git会用fase-forward模式，但有些时候并不能使用快速合并，这个时候会合并之后并做一次新的提交。但这种模式下，删除分支后，会丢掉分支信息


合并冲突小结：情况一：如果两个同时对一个分支进行了修改并提交
              情况二：如果两个分支分别对不同的文件进行了修改提交


如果要强制禁用fast forward模式，git就会再merge时生成一个新的提交


××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××

bug分支

在软件开发中，每个bug都可以通过一个新的临时分支来修复，修复之后，合并分支，然后将临时分支删除

修复bug存在的问题：
    但是如果当前正在dev上进行的工作还没有提交，而且工作没有完成，目前无法提交，
        但是现在bug必须修复，该怎么办;
问题的解决:
    git还提供了一个stash功能，可以把当前工作现场存储起来，等以后恢复现场继续工作,首先确定要在哪个分支上修复bug，之后就在bug所在的分支上创建临时分支,进行bug修复的工作，然后进行提交，修复完成后，切换到master分支，并完成合并，最后删除bug分支，bug修复完成，就可以切换回原来工作的分支继续干活了，使用命令git stash pop恢复工作现场


上传分支

1.在命令行中复制仓库中的内容 git clone  https://github.com/WLL180/test.git
2.项目克隆到本地之后，执行如下命令创建分支smart,并切换到该分支上;
3.创建一个文件写入内容并提交
4.推送分支就是把该分支上的所有本地提交推送到远程库，推送时要指定本地分支，这样就可以把分支推送到远程对应的远程分支上。git push origin 分支名称


将本地分支跟踪服务器分支
git branch --set-upstream-to-origin/远程分支名称 本地分支名称

从远程分支上拉取代码
git pull origin 分支名






















